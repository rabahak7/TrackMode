#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('trackb:server');
var http = require('http');
const Pis = require("../models/Pis");
const moment = require('moment');
const { Sequelize } = require("sequelize");

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '5000');
app.set('port', port);

/**
 * Create HTTP server and Socket.IO.
 */
var server = http.createServer(app);
var io = require('socket.io')(server);

piList = ['pi1', 'pi2', 'pi3', 'pi4', 'pi5', 'pi6'];
watchList = ['98:28:A6:D4:6F:DB', '98:28:A6:D4:6F:0E', '98:28:A6:D4:65:8A'];
WatchIdx = [1, 2, 3];

setInterval(() => {
  watchList.forEach((watch, idx) => {
    // Minus the watchIdx 
    io.emit(piList[WatchIdx[idx]-1], {watch: watch});
    // console.log(piList[WatchIdx[idx]-1]);
    WatchIdx[idx] = WatchIdx[idx]+1;
    if (WatchIdx[idx] > 6) {
      WatchIdx[idx] = 1;
    }
  });
  
  WatchIdx;
}, 5000);


// setInterval(() => {
//   io.emit("measure");
// }, 10000);

// io.on('connection', (socket)=>{
//   socket.on("online", ()=>{
//     io.emit("measure");
//   })
//   // socket.on("complete", ()=>{
//   //   console.log("hello");
//   // })
// })


/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port, '0.0.0.0');
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
